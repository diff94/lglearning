
<!--JavaScript Can Change HTML Content
One of many JavaScript HTML methods is getElementById().-->
<!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p id="demo">JavaScript can change HTML content.</p>

<button type="button" onclick="document.getElementById('demo').innerHTML = 'Hello JavaScript!'">Click Me!</button>
<!--button形式 按下後 把在demo 那邊的內容 轉換成 = 'Hello JavaScript!'-->
<!--JavaScript accepts both double and single quotes-->
</body>
</html>


<!--JavaScript Can Change HTML Attribute Values
In this example JavaScript changes the value of the src (source) attribute of an <img> tag:-->
<!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p>JavaScript can change HTML attribute values.</p>

<p>In this case JavaScript changes the value of the src (source) attribute of an image.</p>

<button onclick="document.getElementById('myImage').src='pic_bulbon.gif'">Turn on the light</button>

<img id="myImage" src="pic_bulboff.gif" style="width:100px">

<button onclick="document.getElementById('myImage').src='pic_bulboff.gif'">Turn off the light</button>

</body>
</html>


<!--JavaScript Can Change HTML Styles (CSS)
Changing the style of an HTML element, is a variant of changing an HTML attribute:-->
<!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p id="demo">JavaScript can change the style of an HTML element.</p>

<button type="button" onclick="document.getElementById('demo').style.fontSize='95px'">Click Me!</button>

</body>
</html> 



<!--JavaScript Can Hide HTML Elements
Hiding HTML elements can be done by changing the display style:-->
<!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p id="demo">JavaScript can hide HTML elements.</p>

<button type="button" onclick="document.getElementById('demo').style.display='none'">Click Me!</button>

</body>
</html> 

<!--JavaScript Can Show HTML Elements
Showing hidden HTML elements can also be done by changing the display style:-->
<!DOCTYPE html>
<html>
<body>

<h2>What Can JavaScript Do?</h2>

<p>JavaScript can show hidden HTML elements.</p>

<p id="demo" style="display:none">Hello JavaScript!</p>

<button type="button" onclick="document.getElementById('demo').style.display='block'">Click Me!</button>

</body>
</html> 


<!--Did You Know?
JavaScript and Java are completely different languages, both in concept and design.

JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard in 1997.

ECMA-262 is the official name of the standard. ECMAScript is the official name of the language.-->


<!--In HTML, JavaScript code is inserted between <script> and </script> tags.-->
<script>
    document.getElementById("demo").innerHTML = "My First JavaScript";
</script>

<!--JavaScript Functions and Events
A JavaScript function is a block of JavaScript code, that can be executed when "called" for.

For example, a function can be called when an event occurs, like when the user clicks a button.-->

<!--JavaScript in <head> or <body>
You can place any number of scripts in an HTML document.

Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.-->
<!--a JavaScript function is placed in the <head> section of an HTML page-->
    <!DOCTYPE html>
    <html>
    <head>
    <script>
    function myFunction() {
      document.getElementById("demo").innerHTML = "Paragraph changed.";
    }
    </script>
    </head>
    <body>
    <h2>Demo JavaScript in Head</h2>
    
    <p id="demo">A Paragraph</p>
    <button type="button" onclick="myFunction()">Try it</button>
    <!--按下去後就會變成innerHTML = "Paragraph changed."這個字-->
    </body>
    </html>    

<!--Placing scripts at the bottom of the <body> element improves the display speed, because script interpretation slows down the display.-->
<!DOCTYPE html>
<html>
<body>

<h2>Demo JavaScript in Body</h2>

<p id="demo">A Paragraph</p>

<button type="button" onclick="myFunction()">Try it</button>

<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>

</body>
</html>

<!--External JavaScript
Scripts can also be placed in external files-->

function myFunction() {
    document.getElementById("demo").innerHTML = "Paragraph changed.";
  }

<!--To use an external script, put the name of the script file in the src (source) attribute of a <script> tag:-->
    <script src="myScript.js"></script>
<!--You can place an external script reference in <head> or <body> as you like.

The script will behave as if it was located exactly where the <script> tag is located.

External scripts cannot contain <script> tags.-->

<!--External JavaScript Advantages
Placing scripts in external files has some advantages:

It separates HTML and code
It makes HTML and JavaScript easier to read and maintain
Cached JavaScript files can speed up page loads
To add several script files to one page  - use several script tags:-->
<script src="myScript1.js"></script>
<script src="myScript2.js"></script>

<!--External References
An external script can be referenced in 3 different ways:

With a full URL (a full web address)
With a file path (like /js/)
Without any path
This example uses a full URL to link to myScript.js:-->
<script src="https://www.w3schools.com/js/myScript.js"></script>
<script src="/js/myScript.js"></script>
<script src="myScript.js"></script>

<!--avaScript can "display" data in different ways:

Writing into an HTML element, using innerHTML.
Writing into the HTML output using document.write().
Writing into an alert box, using window.alert().
Writing into the browser console, using console.log().-->

<!--Using innerHTML
To access an HTML element, JavaScript can use the document.getElementById(id) method.

The id attribute defines the HTML element. The innerHTML property defines the HTML content:-->

<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My First Paragraph</p>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 5 + 6;
</script>

</body>
</html>

<!--Changing the innerHTML property of an HTML element is a common way to display data in HTML.-->
<!--Using document.write()
For testing purposes, it is convenient to use document.write():-->
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<script>
document.write(5 + 6);
</script>

</body>
</html>
<!--Using document.write() after an HTML document is loaded, will delete all existing HTML:-->
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<button type="button" onclick="document.write(5 + 6)">Try it</button>

</body>
</html>
<!--The document.write() method should only be used for testing.-->

<!--Using window.alert()
You can use an alert box to display data:-->
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<script>
window.alert(5 + 6);
</script>

</body>
</html>
<!--You can skip the window keyword.

In JavaScript, the window object is the global scope object. This means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional:-->
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<script>
alert(5 + 6);
</script>

</body>
</html>

<!--Using console.log()
For debugging purposes, you can call the console.log() method in the browser to display data.-->
<!DOCTYPE html>
<html>
<body>

<script>
console.log(5 + 6);
</script>

</body>
</html>


<!--JavaScript Print
JavaScript does not have any print object or print methods.

You cannot access output devices from JavaScript.

The only exception is that you can call the window.print() method in the browser to print the content of the current window.-->

<!DOCTYPE html>
<html>
<body>

<button onclick="window.print()">Print this page</button>
<!--在browser看時,按print就會列印該頁面-->
</body>
</html>


<!--下面這邊我直接打在呼叫node的terminal就會出來惹-->
<!--按個右鍵就會貼上去惹-->
<!--JavaScript Programs
A computer program is a list of "instructions" to be "executed" by a computer.

In a programming language, these programming instructions are called statements.

A JavaScript program is a list of programming statements.

In HTML, JavaScript programs are executed by the web browser.

JavaScript Statements
JavaScript statements are composed of:

Values, Operators, Expressions, Keywords, and Comments.

This statement tells the browser to write "Hello Dolly." inside an HTML element with id="demo":-->

document.getElementById("demo").innerHTML = "Hello Dolly.";

<!--Most JavaScript programs contain many JavaScript statements.

The statements are executed, one by one, in the same order as they are written.

JavaScript programs (and JavaScript statements) are often called JavaScript code.-->

<!--Semicolons ;
Semicolons separate JavaScript statements.

Add a semicolon at the end of each executable statement:-->
let a, b, c;  // Declare 3 variables
a = 5;        // Assign the value 5 to a
b = 6;        // Assign the value 6 to b
c = a + b;    // Assign the sum of a and b to c
<!--When separated by semicolons, multiple statements on one line are allowed:-->
a = 5; b = 6; c = a + b;
<!--On the web, you might see examples without semicolons.
Ending statements with semicolon is not required, but highly recommended.-->
<!--JavaScript White Space
JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.

The following lines are equivalent:-->
let person = "Hege";
let person="Hege";
<!--A good practice is to put spaces around operators ( = + - * / ):-->
let x = y + z;
<!--JavaScript Line Length and Line Breaks
For best readability, programmers often like to avoid code lines longer than 80 characters.

If a JavaScript statement does not fit on one line, the best place to break it is after an operator:-->
document.getElementById("demo").innerHTML =
"Hello Dolly!";

<!--JavaScript Code Blocks
JavaScript statements can be grouped together in code blocks, inside curly brackets {...}.

The purpose of code blocks is to define statements to be executed together.

One place you will find statements grouped together in blocks, is in JavaScript functions:-->
function myFunction() {
    document.getElementById("demo1").innerHTML = "Hello Dolly!";
    document.getElementById("demo2").innerHTML = "How are you?";
  }
<!--In this tutorial we use 2 spaces of indentation for code blocks.
You will learn more about functions later in this tutorial.-->

<!--JavaScript Keywords
JavaScript statements often start with a keyword to identify the JavaScript action to be performed.

Our Reserved Words Reference lists all JavaScript keywords.

Here is a list of some of the keywords you will learn about in this tutorial:-->
<!--JavaScript keywords are reserved words. Reserved words cannot be used as names for variables.-->


<!--JavaScript syntax is the set of rules, how JavaScript programs are constructed:

// How to create variables:
var x;
let y;

// How to use variables:
x = 5;
y = 6;
let z = x + y;-->


<!--JavaScript Values
The JavaScript syntax defines two types of values:

Fixed values
Variable values
Fixed values are called Literals.

Variable values are called Variables.

JavaScript Literals
The two most important syntax rules for fixed values are:

1. Numbers are written with or without decimals:-->

10.50

1001

<!--2. Strings are text, written within double or single quotes:-->
"John Doe"

'John Doe'

<!--JavaScript Variables
In a programming language, variables are used to store data values.

JavaScript uses the keywords var, let and const to declare variables.

An equal sign is used to assign values to variables.

In this example, x is defined as a variable. Then, x is assigned (given) the value 6:-->


<!--JavaScript Variables
In a programming language, variables are used to store data values.

JavaScript uses the keywords var, let and const to declare variables.

An equal sign is used to assign values to variables.

In this example, x is defined as a variable. Then, x is assigned (given) the value 6:-->

let x;
x = 6;

<!--JavaScript Operators
JavaScript uses arithmetic operators ( + - * / ) to compute values:-->
(5 + 6) * 10

<!--JavaScript uses an assignment operator ( = ) to assign values to variables:-->
let x, y;
x = 5;
y = 6;
<!--JavaScript Expressions
An expression is a combination of values, variables, and operators, which computes to a value.

The computation is called an evaluation.

For example, 5 * 10 evaluates to 50:-->
5 * 10

<!--Expressions can also contain variable values-->
x * 10
<!--The values can be of various types, such as numbers and strings.

For example, "John" + " " + "Doe", evaluates to "John Doe":-->
"John" + " " + "Doe"

<!--JavaScript Keywords
JavaScript keywords are used to identify actions to be performed.

The let keyword tells the browser to create variables:-->
let x, y;
x = 5 + 6;
y = x * 10;
<!--The var keyword also tells the browser to create variables:-->
var x, y;
x = 5 + 6;
y = x * 10;

<!--In these examples, using var or let will produce the same result.

You will learn more about var and let later in this tutorial.-->

<!--JavaScript Comments
Not all JavaScript statements are "executed".

Code after double slashes // or between /* and */ is treated as a comment.

Comments are ignored, and will not be executed:-->
let x = 5;   // I will be executed

// x = 6;   I will NOT be executed

// Change heading:
document.getElementById("myH").innerHTML = "My First Page";

// Change paragraph:
document.getElementById("myP").innerHTML = "My first paragraph.";

let x = 5;      // Declare x, give it the value of 5
let y = x + 2;  // Declare y, give it the value of x + 2

<!--Multi-line Comments
Multi-line comments start with /* and end with */.

Any text between /* and */ will be ignored by JavaScript.

This example uses a multi-line comment (a comment block) to explain the code:-->
/*
The code below will change
the heading with id = "myH"
and the paragraph with id = "myP"
in my web page:
*/
document.getElementById("myH").innerHTML = "My First Page";
document.getElementById("myP").innerHTML = "My first paragraph.";

<!--JavaScript Identifiers / Names
Identifiers are JavaScript names.

Identifiers are used to name variables and keywords, and functions.

The rules for legal names are the same in most programming languages.

A JavaScript name must begin with:

A letter (A-Z or a-z)
A dollar sign ($)
Or an underscore (_)
Subsequent characters may be letters, digits, underscores, or dollar signs.-->

<!--JavaScript is Case Sensitive
All JavaScript identifiers are case sensitive. 

The variables lastName and lastname, are two different variables:-->
let lastname, lastName;
lastName = "Doe";
lastname = "Peterson";
<!--Hyphens are not allowed in JavaScript. They are reserved for subtractions.-->


<!--4 Ways to Declare a JavaScript Variable:
Using var
Using let
Using const
Using nothing-->
